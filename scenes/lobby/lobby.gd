extends Node2D

@export var coin_scene: PackedScene
@export var num_coins: int = 100 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç–æ–∫
@export var field_size: Vector2 = Vector2(1800, 1000) # –†–∞–∑–º–µ—Ä –ø–æ–ª—è


@export var player_scene: PackedScene # –°—Ü–µ–Ω–∞ –∏–≥—Ä–æ–∫–∞
@onready var players = {} # –•—Ä–∞–Ω–∏—Ç –∏–≥—Ä–æ–∫–æ–≤ (id ‚Üí —É–∑–µ–ª –∏–≥—Ä–æ–∫–∞)
@onready var audio_player = $AudioPlayer
@onready var coin_label = $CanvasLayer/CoinLabel
@onready var coin_last = $CanvasLayer/CoinLast
@onready var player_scores = {}
@onready var exit_game = $CanvasLayer/ExitGame

var local_coins_collected: int = 0
var current_index = randf()
var coins_collected: int = 0

var audio_files = [
	preload("res://assets/sounds/bit-beats-1-168243.mp3"),
	preload("res://assets/sounds/falselyclaimed-bit-beats-3-168873.mp3"),
	preload("res://assets/sounds/that-game-arcade-medium-236110.mp3")
]

func _ready():
	chat_ui.message_sent.connect(_on_message_sent)
	print("coin_label:", coin_label, "coin_last:", coin_last)
	multiplayer.connect("peer_connected", Callable(self, "_on_player_connected"))
	multiplayer.connect("peer_disconnected", Callable(self, "_on_player_disconnected"))
	setup_network()
	play_next()
	scatter_coins()

func setup_network():
	if Global.is_server:
		var server = ENetMultiplayerPeer.new()
		server.create_server(12345)
		multiplayer.multiplayer_peer = server
		print("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 12345!")
		# –°–æ–∑–¥–∞—ë–º –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
		spawn_player(multiplayer.get_unique_id())
		players[multiplayer.get_unique_id()].set_player_name(Global.player_name)
	else:
		var client = ENetMultiplayerPeer.new()
		client.create_client(Global.server_ip, 12345)
		multiplayer.multiplayer_peer = client
		print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ –∞–¥—Ä–µ—Å—É: ", Global.server_ip)
		# –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
		await await_connection()

func await_connection():
	while multiplayer.multiplayer_peer.get_connection_status() != MultiplayerPeer.CONNECTION_CONNECTED:
		await get_tree().process_frame # –ñ–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–¥—Ä–∞
	print("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É!")
	print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", Global.player_name)
	rpc_id(1, "register_player_name", multiplayer.get_unique_id(), Global.player_name)
	# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º—É–∑—ã–∫–∏ —É —Å–µ—Ä–≤–µ—Ä–∞
	rpc_id(1, "request_music_state")

func _on_player_connected(id):
	if multiplayer.is_server():
		print("–ò–≥—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á—ë–Ω —Å ID:", id)
		spawn_player(id) # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—ë–º –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
		player_scores[id] = 0

		# –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –∏–≥—Ä–æ–∫–µ
		for peer_id in multiplayer.get_peers():
			if peer_id != id:
				rpc_id(peer_id, "spawn_player", id)
				await get_tree().process_frame # –ñ–¥—ë–º —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–¥—Ä, —á—Ç–æ–±—ã —É–∑–µ–ª —É—Å–ø–µ–ª —Å–æ–∑–¥–∞—Ç—å—Å—è
				rpc_id(peer_id, "register_player_name", id, players[id].player_name)

		# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–º—É –∏–≥—Ä–æ–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
		for existing_id in players.keys():
			rpc_id(id, "spawn_player", existing_id)
			await get_tree().process_frame # –ñ–¥—ë–º —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–¥—Ä
			rpc_id(id, "register_player_name", existing_id, players[existing_id].player_name)

		# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –º–æ–Ω–µ—Ç—ã –Ω–æ–≤–æ–º—É –∏–≥—Ä–æ–∫—É
		for coin in coins:
			rpc_id(id, "spawn_coin", coin.position)
			
		# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å—á–µ—Ç–∞ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
		for peer_id in multiplayer.get_peers():
			rpc_id(peer_id, "update_player_score", id, player_scores[id])

		# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–º—É –∏–≥—Ä–æ–∫—É —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤
		for existing_id in player_scores.keys():
			rpc_id(id, "update_player_score", existing_id, player_scores[existing_id])

		# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–º—É –∏–≥—Ä–æ–∫—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –º–æ–Ω–µ—Ç
		rpc_id(id, "update_coin_count", num_coins)

func _on_player_disconnected(id):
	print("–ò–≥—Ä–æ–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è —Å ID: ", id)
	if players.has(id):
		players[id].queue_free()
		players.erase(id)

@rpc("any_peer")
func spawn_player(id):
	if players.has(id):
		return
	var player = player_scene.instantiate()
	player.name = "Player_" + str(id)
	player.position = Vector2(randf() * 400, randf() * 400)
	player.set_multiplayer_authority(id)
	add_child(player)
	players[id] = player
	print("–ò–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω —Å ID:", id, " –ò–º—è —É–∑–ª–∞:", player.name)

	# –ï—Å–ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫
	if id == multiplayer.get_unique_id():
		player.set_player_name(Global.player_name)
		print("–õ–æ–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∏–≥—Ä–æ–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏:", Global.player_name)

		# –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É
		var camera = player.get_node("Camera2D")
		if camera is Camera2D:
			camera.make_current()
			print("–ö–∞–º–µ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞")
		else:
			print("–û—à–∏–±–∫–∞: –£–∑–µ–ª Camera2D –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø")

@rpc("any_peer")
func register_player_name(id, name):
	if not players.has(id):
		print("–ò–≥—Ä–æ–∫ —Å ID", id, "–Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—ë–º...")
		spawn_player(id) # –°–æ–∑–¥–∞—ë–º –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	players[id].set_player_name(name) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –∏–≥—Ä–æ–∫–∞
	print("–ò–º—è –∏–≥—Ä–æ–∫–∞ —Å ID", id, "–æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞:", name)

	# –ï—Å–ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –∏–º—è
	if id == multiplayer.get_unique_id():
		Global.player_name = name
		print("–õ–æ–∫–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫ –æ–±–Ω–æ–≤–∏–ª —Å–≤–æ—ë –∏–º—è –Ω–∞:", name)

func play_next():
	if current_index < audio_files.size():
		audio_player.stream = audio_files[current_index] # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∞—É–¥–∏–æ—Ñ–∞–π–ª
		audio_player.play() # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
		print("–ò–≥—Ä–∞–µ–º —Ñ–∞–π–ª:", audio_files[current_index])

		# –°–æ–æ–±—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –æ –Ω–æ–≤–æ–º —Ç—Ä–µ–∫–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
		rpc("start_music", current_index, 0.0)

		current_index += 1 # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
	else:
		print("–í—Å–µ —Ñ–∞–π–ª—ã –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω—ã.")
		current_index = 0 # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ü–∏–∫–ª

@rpc("any_peer")
func request_music_state():
	if multiplayer.is_server():
		# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –∏ –ø–æ–∑–∏—Ü–∏—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
		rpc_id(multiplayer.get_remote_sender_id(), "start_music", current_index - 1, audio_player.get_playback_position())

func _on_audio_player_finished():
	play_next()

@rpc("any_peer")
func start_music(track_index: int, playback_position: float):
	if track_index < audio_files.size():
		audio_player.stream = audio_files[track_index]
		audio_player.play(playback_position) # –ó–∞–ø—É—Å–∫–∞–µ–º —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞
		print("–ú—É–∑—ã–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: –¢—Ä–µ–∫", track_index, "–í—Ä–µ–º—è:", playback_position)

var coins = []

func scatter_coins():
	if not multiplayer.is_server():
		return  # –ú–æ–Ω–µ—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

	for i in range(num_coins):
		var coin = coin_scene.instantiate()
		var random_x = randf() * field_size.x
		var random_y = randf() * field_size.y
		coin.position = Vector2(random_x, random_y)

		coin.connect("coin_picked", Callable(self, "_on_coin_picked").bind(multiplayer.get_unique_id()))
		#coin.connect("coin_picked", Callable(self, "_on_coin_picked"))

		add_child(coin)
		coins.append(coin)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–Ω–µ—Ç—É –≤ —Å–ø–∏—Å–∫–µ

		# –°–æ–æ–±—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –æ –Ω–æ–≤–æ–π –º–æ–Ω–µ—Ç–µ
		rpc("spawn_coin", coin.position)

@rpc("authority", "reliable")
func spawn_coin(position: Vector2):
	if multiplayer.is_server():
		return  # –°–µ—Ä–≤–µ—Ä –Ω–µ —Å–æ–∑–¥–∞–µ—Ç –º–æ–Ω–µ—Ç—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ

	var coin = coin_scene.instantiate()
	coin.position = position

	coin.connect("coin_picked", Callable(self, "_on_coin_picked").bind(coin))
	add_child(coin)
	coins.append(coin)

@rpc("any_peer", "reliable")
func _on_coin_picked(amount: int, coin_node: NodePath, player_id: int):
	print("üì© _on_coin_picked –≤—ã–∑–≤–∞–Ω–æ! ID –∏–≥—Ä–æ–∫–∞:", player_id, " –õ–æ–∫–∞–ª—å–Ω—ã–π ID:", multiplayer.get_unique_id())

	# 1. –ï—Å–ª–∏ –º–æ–Ω–µ—Ç—É –ø–æ–¥–±–∏—Ä–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ —É –Ω–µ–≥–æ
	if player_id == multiplayer.get_unique_id():
		print("‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫ –ø–æ–¥–æ–±—Ä–∞–ª –º–æ–Ω–µ—Ç—É, –æ–±–Ω–æ–≤–ª—è–µ–º UI...")
		local_coins_collected += amount
		update_coin_labels()

	# 2. –°–µ—Ä–≤–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞–º
	if multiplayer.is_server():
		num_coins -= 1
		print("üõ† –°–µ—Ä–≤–µ—Ä —É–º–µ–Ω—å—à–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç. –û—Å—Ç–∞–ª–æ—Å—å:", num_coins)

		# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
		update_coin_labels()
		rpc("update_coin_count", num_coins)  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
		
		# –£–¥–∞–ª—è–µ–º –º–æ–Ω–µ—Ç—É —É –≤—Å–µ—Ö
		rpc("remove_coin", coin_node)

		# –£–¥–∞–ª—è–µ–º –º–æ–Ω–µ—Ç—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
		var coin = get_node_or_null(coin_node)
		if coin:
			coins.erase(coin)
			coin.queue_free()



@rpc("authority", "reliable")
func remove_coin(coin_node: NodePath):
	var coin = get_node_or_null(coin_node)
	if coin:
		coins.erase(coin)
		coin.queue_free()

func update_coin_labels():
	print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI: –°–æ–±—Ä–∞–Ω–æ –º–æ–Ω–µ—Ç:", local_coins_collected, "–û—Å—Ç–∞–ª–æ—Å—å:", num_coins)
	coin_label.text = "–°–æ–±—Ä–∞–Ω–æ –º–æ–Ω–µ—Ç: " + str(local_coins_collected)  # –£ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å–≤–æ–π —Å—á–µ—Ç
	coin_last.text = "–û—Å—Ç–∞–ª–æ—Å—å –º–æ–Ω–µ—Ç: " + str(num_coins)  # –û–±—â–∏–π —Å—á–µ—Ç—á–∏–∫


@rpc("authority", "reliable")
func update_player_score(id: int, score: int):
	if players.has(id):
		player_scores[id] = score  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç –∏–≥—Ä–æ–∫–∞
		players[id].update_score(score)

	# –û–±–Ω–æ–≤–ª—è–µ–º UI –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–µ—Å–ª–∏ –∏–≥—Ä–æ–∫ = —Å–µ—Ä–≤–µ—Ä)
	if multiplayer.is_server() or id == multiplayer.get_unique_id():
		update_coin_labels()

@rpc("authority", "reliable")
func update_coin_count(count: int):
	num_coins = count
	update_coin_labels()  # –û–±–Ω–æ–≤–ª—è–µ–º UI –∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ



@onready var chat_ui = $ChatUI

@rpc("any_peer", "reliable")
func send_chat_message(player_id: int, message: String):
	if players.has(player_id):
		var player_name = players[player_id].player_name
		chat_ui.add_message(player_name, message)  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —á–∞—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–≤–∞–∂–¥—ã
		if not multiplayer.is_server():
			return  # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å

		# –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä, —Ä–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
		rpc("send_chat_message", player_id, message)


func _on_message_sent(message: String):
	var player_id = multiplayer.get_unique_id()
	if multiplayer.is_server():
		# –ï—Å–ª–∏ —ç—Ç–æ —Å–µ—Ä–≤–µ—Ä, —Å—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		send_chat_message(player_id, message)
	else:
		# –ï—Å–ª–∏ —ç—Ç–æ –∫–ª–∏–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä—É
		rpc_id(1, "send_chat_message", player_id, message)

func _on_exit_game_pressed():
	get_tree().quit()
